#include<iostream>
using namespace std;
//给定一些无权的连接图，查出所有的连通集，
//用领接矩阵+并查集+读取保存
//用临接表+递归读取
int N = 7;
bool myMap[N][N];
myMap[1][0] = true;//2->1
myMap[1][0] = true;//3->

struct aSet{
    vector<int> set;
    int root;
};

void getAllSets(bool myMap[N][N])
{
    int parentSet[N];
     for(int i = 0 ; i < N ;i++)
     {
         parentSet[i] = -1;
     }
    for(int i = 0 ; i < N ;i++)
    {
        for(int j = 0 ; j < N ; j++)
        {
            if(myMap[i][j])
            {
                int parentA = find(i);
                int parentB = find(j);
                if(parentA == parentB)
                    continue;
                else 
                {
                    int setASize = -parentSet[i];
                    int setBSize = -parentSet[j];
                    if(setASize < setBSize)
                    {
                        parentSet[j] += parentSet[i];
                        parentSet[i] = j;
                    }
                    else
                    {
                        parentSet[i] += parentSet[j];
                        parentSet[j] = i;
                    }
                }
            }
        }
    }
    
    int setnumber = 0;
    struct aSet* [N];
    vector<aSet> sets;
    for(int i = 0 ; i < N ;i++)
     {
        if( parentSet[i] < 0 )
        {
            setnumber++;
            struct aSet myset;
            myset.root = i;
            sets.push_back(myset);
        }
     }
    
    
}
//[[1,2], [3,4,5], [6,7]]




struct node{
    int nodenumber;
    node* next;
}
struct node* nodeList[N];
bool visited[N];
void printThisNode(i+1)
{
    if(!visited[i])
    {
        cout<< i+1 <<",";
        visited[i] = true;
    }
    struct node* temp = nodeList[i]->next;
    while(temp != NULL)
    {
        printThisNode(temp->nodenumber);
        temp = temp->next;
    }
}

void printAllSets(struct node* nodeList[N])
{
    //insert all the nodes into the nodeList
    //for every node in the list
    cout<<"[";
    for(int i = 0 ; i < N ; i++ )
    {
        if(nodeList[i]->next != NULL && !visited[i])
        {
            cout<<"[";
            printThisNode(i+1);
            cout<<"],";
        }
    }
    cout<<"]";
    
}

//known a function generating 1,2,3,equally,
//generate a funciton giving 1,2,3,4,5 eqully
int generateThree();
int generateFive()
{
    int x = generateThree();
    int y = generateThree();
    switch(x)
    {
        case 1:
            switch (y)
            {
                case 1:
                    return 1;
                case 2:
                    return 2;
                case 3:
                    return 3;
            }
        case 2:
            switch (y)
            {
                case 1:
                    return 4;
                case 2:
                    return 5;
                case 3:
                    return generateFive();
            }
        case 3:
            return generateFive();
    }
//Too wordy and hard to read
//     if(x == 1 && y == 1)
//         return 1;
//     else if(x == 1 && y == 2)
//         return 2;
//     else if(x == 1 && y == 3)
//         return 3;
//     else if(x == 2 && y == 1)
//         return 4;
//     else if(x == 2 && y == 2 )
//         return 5;
//     else
//         return generateFive();
}